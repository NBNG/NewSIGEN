/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.sigen.Interfaces;

import br.com.sigen.Editor.AutoCompletion;
import br.com.sigen.Modelo.Chapa;
import br.com.sigen.Modelo.Cliente;
import br.com.sigen.Modelo.Letra;
import br.com.sigen.Modelo.Quadra;
import br.com.sigen.Modelo.Venda;
import br.com.sigen.dao.DAO;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.exception.ConstraintViolationException;

/**
 *
 * @author matteus
 */
public class AtualizaVenda extends javax.swing.JFrame {

    Chapa chapa;
    Venda venda;
    Cliente cliente;
    List<Chapa> chapas;
    List<Quadra> quadras;
    List<Cliente> clientes;
    DAO<Quadra> quadradao;
    DAO<Chapa> chapadao;
    DAO<Cliente> clientedao;
    DAO<Venda> vendadao;
    HashSet hashLetra = new HashSet();
    ListarVenda lista;
    JDesktopPane painel;
    DefaultTableModel tmVenda = new DefaultTableModel(null,
            new String[]{"Nome", "CPF", "RG"}) {
                boolean[] canEdit = new boolean[]{
                    false, false, false
                };

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            };

    public AtualizaVenda(Object[] resultado,
            ListarVenda lista, JDesktopPane painel) {
        super("Atualização de Vendas");
        initComponents();
        vendadao = new DAO<>(Venda.class);
        venda = vendadao.busca((Long) resultado[7]);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        populateFields(venda);
        this.lista = lista;
        this.painel = painel;
        populateClientes();
        AutoCompletion.enable(jCBCliente);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().
                getResource("/br/com/sigen/Imagens/icone.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLQuadra = new javax.swing.JLabel();
        jLVersao = new javax.swing.JLabel();
        jCBQuadra = new javax.swing.JComboBox();
        jLEmpresa = new javax.swing.JLabel();
        jLChapa = new javax.swing.JLabel();
        jLCabecalho = new javax.swing.JLabel();
        jCBLetra = new javax.swing.JComboBox();
        jBCadastrar = new javax.swing.JButton();
        jCBChapa = new javax.swing.JComboBox();
        jLLetra = new javax.swing.JLabel();
        jRBAlterar = new javax.swing.JRadioButton();
        jLCliente = new javax.swing.JLabel();
        jLCPF = new javax.swing.JLabel();
        jCBCliente = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLQuadra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLQuadra.setText("Quadra:");

        jLVersao.setText("Versão: 1.4.6");

        jCBQuadra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBQuadra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBQuadraActionPerformed(evt);
            }
        });

        jLEmpresa.setText("NBNG. Todos os direitos reservados.");

        jLChapa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLChapa.setText("Letra:");

        jLCabecalho.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLCabecalho.setText("Atualização de Venda");

        jCBLetra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBLetra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBLetraActionPerformed(evt);
            }
        });

        jBCadastrar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBCadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sigen/Imagens/editar.png"))); // NOI18N
        jBCadastrar.setText("Editar");
        jBCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCadastrarActionPerformed(evt);
            }
        });

        jCBChapa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLLetra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLLetra.setText("Chapa:");

        jRBAlterar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBAlterar.setText("Alterar Túmulo");
        jRBAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBAlterarActionPerformed(evt);
            }
        });

        jLCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLCliente.setText("Cliente:");

        jLCPF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLCPF.setText("CPF: ");

        jCBCliente.setEditable(true);
        jCBCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLEmpresa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLVersao))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jLCabecalho))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBCadastrar)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLCliente)
                                .addGap(18, 18, 18)
                                .addComponent(jCBCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLCPF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLQuadra, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCBQuadra, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jCBLetra, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLChapa)
                                        .addGap(14, 14, 14)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCBChapa, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLLetra)))
                            .addComponent(jRBAlterar, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLCabecalho)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLCliente)
                    .addComponent(jCBCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLCPF)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLQuadra)
                    .addComponent(jLChapa)
                    .addComponent(jLLetra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBLetra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBChapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBQuadra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jRBAlterar)
                .addGap(18, 18, 18)
                .addComponent(jBCadastrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLEmpresa)
                    .addComponent(jLVersao)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCBQuadraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBQuadraActionPerformed
        if (jRBAlterar.isSelected()) {
            populateLetras();
        }
    }//GEN-LAST:event_jCBQuadraActionPerformed

    private void jCBLetraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBLetraActionPerformed
        if (jRBAlterar.isSelected()) {
            populateChapas();
        }
    }//GEN-LAST:event_jCBLetraActionPerformed

    private void jBCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCadastrarActionPerformed
        System.out.println("Nome 3: " + clientes.get(2).getNome());
        System.out.println("Cpf 3:" + clientes.get(2).getCpf());
        System.out.println("Nome 4:" + clientes.get(3).getNome());

        System.out.println("CPF 4:" + clientes.get(3).getCpf());

        try {
            /*
             *Se o radio buttom de alteração foi selecionado, a chapa 
             *selecionada no combobox é carregada, senão a chapa da venda atual
             *é carregada.
             */
            if (jRBAlterar.isSelected()) {
                chapa = chapas.get(jCBChapa.getSelectedIndex());
            } else {
                chapa = venda.getChapa();
            }
            cliente = clientes.get(jCBCliente.getSelectedIndex());

            venda.setCliente(cliente);
            venda.setChapa(chapa);
            chapa.setVenda(venda);

            vendadao = new DAO<Venda>(Venda.class);
            vendadao.atualiza(venda);
            vendadao.close();
            limpar();
            JOptionPane.showMessageDialog(this, "Venda"
                    + " atualizada com sucesso!", "Activity Performed "
                    + "Successfully", JOptionPane.INFORMATION_MESSAGE);
            limpar();

        } catch (IllegalArgumentException | ConstraintViolationException e) {
            JOptionPane.showMessageDialog(this, "Campos"
                    + " obrigatórios (*) vazios e/ou Informação inválida!",
                    "ERROR 404 - Content not found!", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jBCadastrarActionPerformed

    private void jRBAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBAlterarActionPerformed
        if (jRBAlterar.isSelected()) {
            populateQuadra();
        } else {
            populateFields(venda);
        }
    }//GEN-LAST:event_jRBAlterarActionPerformed

    private void jCBClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBClienteActionPerformed
        System.out.println(jCBCliente.getSelectedIndex());
        jLCPF.setText("CPF: " + clientes.get(jCBCliente.getSelectedIndex()).getCpf());
    }//GEN-LAST:event_jCBClienteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCadastrar;
    private javax.swing.JComboBox jCBChapa;
    private javax.swing.JComboBox jCBCliente;
    private javax.swing.JComboBox jCBLetra;
    private javax.swing.JComboBox jCBQuadra;
    private javax.swing.JLabel jLCPF;
    private javax.swing.JLabel jLCabecalho;
    private javax.swing.JLabel jLChapa;
    private javax.swing.JLabel jLCliente;
    private javax.swing.JLabel jLEmpresa;
    private javax.swing.JLabel jLLetra;
    private javax.swing.JLabel jLQuadra;
    private javax.swing.JLabel jLVersao;
    private javax.swing.JRadioButton jRBAlterar;
    // End of variables declaration//GEN-END:variables

    /*Query que retorna todas as chapas que não foram vendidas e que pertencem
     a uma quadra x.
     */
    private String queryLetra(String quadra) {
        return "FROM Chapa chapa "
                + "INNER JOIN chapa.letra as letra"
                + " INNER JOIN letra.quadra as quadra"
                + " LEFT JOIN chapa.venda as venda "
                + "WHERE quadra.quadra ='" + quadra + "' AND "
                + "venda.chapa is null"
                + " ORDER BY quadra.quadra,letra.letra,chapa.chapa";
    }

    /*Query que retorna todas as quadras que não foram vendidas, pertencentes
     a uma letra x que pertence a uma quadra y
     */
    private String queryChapa(String quadra, String letra) {
        return "FROM Chapa chapa "
                + "INNER JOIN chapa.letra as letra"
                + " INNER JOIN letra.quadra as quadra"
                + " LEFT JOIN chapa.venda as venda "
                + "WHERE quadra.quadra ='" + quadra + "' AND "
                + "letra.letra ='" + letra + "' AND "
                + "venda.chapa is null"
                + " ORDER BY quadra.quadra,letra.letra,chapa.chapa";
    }

    private void populateQuadra() {
        jCBQuadra.removeAllItems();
        quadradao = new DAO<Quadra>(Quadra.class);
        quadras = quadradao.listaTodos();
        quadradao.close();
        for (int i = 0; i < quadras.size(); i++) {
            jCBQuadra.addItem(quadras.get(i).getQuadra());
        }
    }

    private void populateLetras() {

        jCBLetra.removeAllItems();
        String quadra = (String) jCBQuadra.getSelectedItem();
        quadradao = new DAO<>(Quadra.class);
        List<Object[]> list = quadradao.buscaAvançada(queryLetra(quadra));
        quadradao.close();
        Object resultado[];

        for (int i = 0; i < list.size(); i++) {
            resultado = list.get(i);
            Letra letra = (Letra) resultado[1];
            hashLetra.add(letra.getLetra());
        }
        Iterator i = hashLetra.iterator();
        while (i.hasNext()) {
            jCBLetra.addItem(i.next());
        }
        hashLetra.clear();

    }

    private void populateChapas() {
        jCBChapa.removeAllItems();
        String quadraAux = (String) jCBQuadra.getSelectedItem();
        String letraAux = (String) jCBLetra.getSelectedItem();

        chapadao = new DAO<>(Chapa.class);
        List<Object[]> list = chapadao.
                buscaAvançada(queryChapa(quadraAux, letraAux));
        chapadao.close();
        Object resultado[];
        chapas = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            resultado = list.get(i);
            Chapa chapa = (Chapa) resultado[0];
            chapas.add(chapa);
            jCBChapa.addItem(chapa.getChapa());
        }

    }

    private void limpar() {
        ListarVenda lv = new ListarVenda(painel);
        painel.add(lv);
        lv.setVisible(true);
        this.dispose();
        lista.dispose();
    }

    private void populateFields(Venda venda) {

        jCBQuadra.removeAllItems();
        jCBLetra.removeAllItems();
        jCBChapa.removeAllItems();
        //jTCliente.setText(venda.getCliente().getNome());
        jCBQuadra.addItem(venda.getChapa().getLetra().getQuadra().getQuadra());
        jCBLetra.addItem(venda.getChapa().getLetra().getLetra());
        jCBChapa.addItem(venda.getChapa().getChapa());
        vendadao.close();
    }

    private void populateClientes() {
        clientedao = new DAO<>(Cliente.class);
        clientes = clientedao.buscaPorNome("");
        for (int i = 0; i < clientes.size(); i++) {
            jCBCliente.addItem(clientes.get(i).getNome()
                    + " CPF: " + clientes.get(i).getCpf());
        }
        clientedao.close();
    }
}
