/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.sigen.Interfaces;

import br.com.sigen.Editor.Editor;
import br.com.sigen.Modelo.Chapa;
import br.com.sigen.Modelo.Cliente;
import br.com.sigen.Modelo.Letra;
import br.com.sigen.Modelo.Obito;
import br.com.sigen.Modelo.Quadra;
import br.com.sigen.dao.DAO;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author matt
 */
public class ListarObito extends javax.swing.JInternalFrame {

    ListSelectionModel lsmObitos;
    DefaultTableModel tmObito = new DefaultTableModel(null, new String[]{"Proprietário do Túmulo", "Falecido", "Idade", "Cidade", "Protocolo", "Guia", "Data", "Nº Documento", "Filiação - Pai", "Filiação - Mãe", "Médico", "Causa da Morte", "Tumulo"});
    /**
     * Creates new form Listar_Obitos
     */
    DAO<Quadra> quadradao;
    DAO<Obito> obitodao;
    String cpf, clienteNome, falecido, quadraAux, letraAux, chapaAux;
    Date dataInicial, dataFinal;
    HashSet hashQuadra = new HashSet();
    HashSet hashLetra = new HashSet();
    List<Chapa> chapas = new ArrayList<>();
    List<Obito> obitos = new ArrayList<>();
    List<Object[]> list;
    Cliente cliente;
    Obito obito;
    Chapa chapa;
    JDesktopPane painel;

    public ListarObito() throws ParseException {
        super("SIGEN - Listagem dos Óbitos");
        initComponents();
        MaskFormatter maskCPF = new MaskFormatter("###.###.###-##");
        maskCPF.install(jTCPF);
        tabela.setRowHeight(23);
        populateQuadras();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRBCliente = new javax.swing.JRadioButton();
        jRBTumulo = new javax.swing.JRadioButton();
        jTCliente = new javax.swing.JTextField();
        jLCabecalho = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jDCInicio = new com.toedter.calendar.JDateChooser();
        jDCFim = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jRBData = new javax.swing.JRadioButton();
        jRBCPF = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jTFalecido = new javax.swing.JTextField();
        jRBFalecido = new javax.swing.JRadioButton();
        jLQuadra = new javax.swing.JLabel();
        jLChapa = new javax.swing.JLabel();
        jLLetra = new javax.swing.JLabel();
        jBAvancado = new javax.swing.JButton();
        jLEmpresa = new javax.swing.JLabel();
        jLVersao = new javax.swing.JLabel();
        jTCPF = new javax.swing.JFormattedTextField();
        jCBQuadra = new javax.swing.JComboBox();
        jCBLetra = new javax.swing.JComboBox();
        jCBChapa = new javax.swing.JComboBox();
        jTBSeleciona = new javax.swing.JToggleButton();

        setClosable(true);

        jRBCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBCliente.setText("Nome - Cliente");

        jRBTumulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBTumulo.setText("Túmulo - ");

        jTCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTClienteKeyTyped(evt);
            }
        });

        jLCabecalho.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLCabecalho.setText("Listagem dos Óbitos");

        jDCInicio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jDCFim.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Início");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Fim");

        jRBData.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBData.setText("Data -");

        jRBCPF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBCPF.setText("CPF - Cliente");

        tabela.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tabela.setModel(tmObito);
        jScrollPane1.setViewportView(tabela);

        jTFalecido.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTFalecido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFalecidoKeyTyped(evt);
            }
        });

        jRBFalecido.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBFalecido.setText("Nome - Falecido");

        jLQuadra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLQuadra.setText("Quadra:");

        jLChapa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLChapa.setText("Letra:");

        jLLetra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLLetra.setText("Chapa:");

        jBAvancado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBAvancado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sigen/Imagens/pesquisar.png"))); // NOI18N
        jBAvancado.setText("Pesquisar");
        jBAvancado.setToolTipText("Pesquisa exclusiva para nome do proprietário do túmulo, nome do falecido ou data.");
        jBAvancado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAvancadoActionPerformed(evt);
            }
        });

        jLEmpresa.setText("NBNG. Todos os direitos reservados.");

        jLVersao.setText("Versão: 1.4.6");

        jTCPF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCBQuadra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBQuadra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBQuadraActionPerformed(evt);
            }
        });

        jCBLetra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBLetra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBLetraActionPerformed(evt);
            }
        });

        jCBChapa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jTBSeleciona.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTBSeleciona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sigen/Imagens/editar.png"))); // NOI18N
        jTBSeleciona.setText("Selecionar Tudo");
        jTBSeleciona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBSelecionaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator2)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLCabecalho)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRBCliente)
                                .addGap(18, 18, 18)
                                .addComponent(jTCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRBCPF)
                                .addGap(18, 18, 18)
                                .addComponent(jTCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRBFalecido)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTFalecido, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRBTumulo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCBQuadra, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLQuadra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLChapa)
                                    .addComponent(jCBLetra, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLLetra)
                                    .addComponent(jCBChapa, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(129, 129, 129)
                                .addComponent(jRBData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(19, 19, 19)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jDCFim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jDCInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                                .addGap(124, 124, 124)
                                .addComponent(jBAvancado)
                                .addGap(18, 18, 18)
                                .addComponent(jTBSeleciona)))
                        .addContainerGap(32, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLEmpresa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLVersao))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCBChapa, jCBLetra, jCBQuadra});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLCabecalho)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRBTumulo)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLQuadra)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBQuadra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jBAvancado)
                                    .addComponent(jTBSeleciona))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jDCInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jDCFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jRBData)))
                        .addGap(27, 27, 27)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jRBCPF)
                                .addComponent(jRBFalecido)
                                .addComponent(jTFalecido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jRBCliente)
                                .addComponent(jTCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLVersao)
                                    .addComponent(jLEmpresa)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(334, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLChapa)
                            .addComponent(jLLetra))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCBLetra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCBChapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*Conforme é digitado o nome do falecido, é realizado uma busca no banco
    a procura dos nomes parecidos e então os dados são populados na tabela
    */
    private void jTFalecidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFalecidoKeyTyped
        if (jRBFalecido.isSelected()) {
            while (tmObito.getRowCount() > 0) {
                tmObito.removeRow(0);
            }
            
            list = new DAO<>(Obito.class).buscaAvançada(montaQuery());
            
            
            for (int i = 0; i < list.size(); i++) {
                Object[] resultado = list.get(i);
                String tumulo = "Quadra: " + resultado[12] + " "
                        + "Letra: " + resultado[13] + " Chapa: " + resultado[14];
                tmObito.addRow(new String[]{null, null, null, null});
                //Posições abaixo relativos as ordem das colunas do JTABLE
                tmObito.setValueAt(resultado[0], i, 0); //Proprietário do TúmuloF
                tmObito.setValueAt(resultado[1], i, 1); //Falecido
                tmObito.setValueAt(resultado[2], i, 2); //Idade
                tmObito.setValueAt(resultado[3], i, 3); //Cidade
                tmObito.setValueAt(resultado[4], i, 4); //Protocolo
                tmObito.setValueAt(resultado[5], i, 5); //Guia
                tmObito.setValueAt(Editor.
                        formatData((Date) resultado[6]), i, 6); //Data
                tmObito.setValueAt(resultado[7], i, 7); //Documento
                tmObito.setValueAt(resultado[8], i, 8); //pai
                tmObito.setValueAt(resultado[9], i, 9); //mae
                tmObito.setValueAt(resultado[10], i, 10); //medico
                tmObito.setValueAt(resultado[11], i, 11); //Causa
                tmObito.setValueAt(tumulo, i, 12); //Tumulo
            }
        }
    }//GEN-LAST:event_jTFalecidoKeyTyped

    /*Realiza a pesquisa no banco conforme os radio buttom */
    private void jBAvancadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAvancadoActionPerformed
        while (tmObito.getRowCount() > 0) {
            tmObito.removeRow(0);
        }
        
        list = new DAO<>(Obito.class).buscaAvançada(montaQuery());
        
        for (int i = 0; i < list.size(); i++) {
            Object[] resultado = list.get(i);
            String tumulo = "Quadra: " + resultado[12] + " "
                    + "Letra: " + resultado[13] + " Chapa: " + resultado[14];
            tmObito.addRow(new String[]{null, null, null, null});
            //Posições abaixo relativos as ordem das colunas do JTABLE
            tmObito.setValueAt(resultado[0], i, 0); //Proprietário do TúmuloF
            tmObito.setValueAt(resultado[1], i, 1); //Falecido
            tmObito.setValueAt(resultado[2], i, 2); //Idade
            tmObito.setValueAt(resultado[3], i, 3); //Cidade
            tmObito.setValueAt(resultado[4], i, 4); //Protocolo
            tmObito.setValueAt(resultado[5], i, 5); //Guia
            tmObito.setValueAt(Editor.
                    formatData((Date) resultado[6]), i, 6); //Data
            tmObito.setValueAt(resultado[7], i, 7); //Documento
            tmObito.setValueAt(resultado[8], i, 8); //pai
            tmObito.setValueAt(resultado[9], i, 9); //mae
            tmObito.setValueAt(resultado[10], i, 10); //medico
            tmObito.setValueAt(resultado[11], i, 11); //Causa
            tmObito.setValueAt(tumulo, i, 12); //Tumulo
        }
    }//GEN-LAST:event_jBAvancadoActionPerformed

    private void jCBLetraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBLetraActionPerformed
        populateChapas();
    }//GEN-LAST:event_jCBLetraActionPerformed

    private void jCBQuadraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBQuadraActionPerformed
        populateLetras();
    }//GEN-LAST:event_jCBQuadraActionPerformed

    private void jTBSelecionaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBSelecionaActionPerformed
        if (jTBSeleciona.isSelected()) {
            jRBCPF.setSelected(true);
            jRBCliente.setSelected(true);
            jRBData.setSelected(true);
            jRBFalecido.setSelected(true);
            jRBTumulo.setSelected(true);
        } else {
            jRBCPF.setSelected(false);
            jRBCliente.setSelected(false);
            jRBData.setSelected(false);
            jRBFalecido.setSelected(false);
            jRBTumulo.setSelected(false);
        }
    }//GEN-LAST:event_jTBSelecionaActionPerformed

    /*Conforme é digitado o nome do falecido, é realizado uma busca no banco
    a procura dos nomes parecidos e então os dados são populados na tabela
    */
    private void jTClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTClienteKeyTyped
        if (jRBCliente.isSelected()) {
            while (tmObito.getRowCount() > 0) {
                tmObito.removeRow(0);
            }
            
            list = new DAO<>(Obito.class).buscaAvançada(montaQuery());
            
            for (int i = 0; i < list.size(); i++) {
                Object[] resultado = list.get(i);
                String tumulo = "Quadra: " + resultado[12] + " "
                        + "Letra: " + resultado[13] + " Chapa: " + resultado[14];
                tmObito.addRow(new String[]{null, null, null, null});
                //Posições abaixo relativos as ordem das colunas do JTABLE
                tmObito.setValueAt(resultado[0], i, 0); //Proprietário do TúmuloF
                tmObito.setValueAt(resultado[1], i, 1); //Falecido
                tmObito.setValueAt(resultado[2], i, 2); //Idade
                tmObito.setValueAt(resultado[3], i, 3); //Cidade
                tmObito.setValueAt(resultado[4], i, 4); //Protocolo
                tmObito.setValueAt(resultado[5], i, 5); //Guia
                tmObito.setValueAt(Editor.
                        formatData((Date) resultado[6]), i, 6); //Data
                tmObito.setValueAt(resultado[7], i, 7); //Documento
                tmObito.setValueAt(resultado[8], i, 8); //pai
                tmObito.setValueAt(resultado[9], i, 9); //mae
                tmObito.setValueAt(resultado[10], i, 10); //medico
                tmObito.setValueAt(resultado[11], i, 11); //Causa
                tmObito.setValueAt(tumulo, i, 12); //Tumulo
            }
        }
    }//GEN-LAST:event_jTClienteKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAvancado;
    private javax.swing.JComboBox jCBChapa;
    private javax.swing.JComboBox jCBLetra;
    private javax.swing.JComboBox jCBQuadra;
    private com.toedter.calendar.JDateChooser jDCFim;
    private com.toedter.calendar.JDateChooser jDCInicio;
    private javax.swing.JLabel jLCabecalho;
    private javax.swing.JLabel jLChapa;
    private javax.swing.JLabel jLEmpresa;
    private javax.swing.JLabel jLLetra;
    private javax.swing.JLabel jLQuadra;
    private javax.swing.JLabel jLVersao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRBCPF;
    private javax.swing.JRadioButton jRBCliente;
    private javax.swing.JRadioButton jRBData;
    private javax.swing.JRadioButton jRBFalecido;
    private javax.swing.JRadioButton jRBTumulo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToggleButton jTBSeleciona;
    private javax.swing.JFormattedTextField jTCPF;
    private javax.swing.JTextField jTCliente;
    private javax.swing.JTextField jTFalecido;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables

    private String montaQuery() {
        String query = "SELECT cliente.nome,obito.nome,obito.idade,obito.cidade,"
                + "obito.protocolo,obito.guia,obito.data,obito.numeroDocumento,"
                + "obito.pai,obito.mae,obito.medico,obito.causaMorte,"
                + "quadra.quadra,letra.letra,chapa.chapa "
                + "FROM Obito obito "
                + "INNER JOIN obito.chapa as chapa "
                + "INNER JOIN chapa.letra as letra "
                + "INNER JOIN letra.quadra as quadra "
                + "INNER JOIN chapa.venda as venda "
                + "INNER JOIN venda.cliente as cliente "
                + "WHERE 1=1";

        if (jRBCPF.isSelected()) {
            cpf = jTCPF.getText();
            query += "AND lower(cliente.cpf) like lower('" + cpf + "') ";
        }
        if (jRBCliente.isSelected()) {
            clienteNome = jTCliente.getText();
            query += "AND lower(cliente.nome) "
                    + "like lower('%" + clienteNome + "%') ";
        }
        if (jRBData.isSelected()) {
            dataInicial = jDCInicio.getDate();
            dataFinal = jDCFim.getDate();
            if (dataInicial == null || dataFinal == null) {
                JOptionPane.showMessageDialog(this, "Pesquisa efetuada sem datas"
                        + ". \n Ambas as datas devem ser escolhidas!");
            } else {
                query += "AND obito.data BETWEEN '" + dataInicial + ""
                        + "' AND '" + dataFinal + "' ";
            }
        }
        if (jRBFalecido.isSelected()) {
            falecido = jTFalecido.getText();
            query += "AND lower(obito.nome) like lower('%" + falecido + "%') ";
        }
        if (jRBTumulo.isSelected()) {
            quadraAux = (String) jCBQuadra.getSelectedItem();
            letraAux = (String) jCBLetra.getSelectedItem();
            chapaAux = (String) jCBChapa.getSelectedItem();
            query += "AND quadra.quadra='" + quadraAux + "' "
                    + "AND letra.letra ='" + letraAux + "' "
                    + "AND chapa.chapa='" + chapaAux + "'";
        }
        query += " order by cliente.nome,obito.nome";
        return query;
    }
    
    /*Query que retorna todas as chapas que pertence a uma quadra y
    */
    private String queryLetra(String quadra) {
        return "FROM Chapa chapa "
                + "INNER JOIN chapa.letra as letra"
                + " INNER JOIN letra.quadra as quadra"
                + " LEFT JOIN chapa.venda as venda"
                + " INNER JOIN venda.cliente as cliente "
                + "where quadra.quadra = '" + quadra + "'"
                + " ORDER BY quadra.quadra,letra.letra,chapa.chapa";
    }

    /*Query que retorna todas as chapas que pertence a uma letra x e 
    esta uma quadra y
    */
    private String queryChapa(String quadra, String letra) {
        return "FROM Chapa chapa "
                + "INNER JOIN chapa.letra as letra"
                + " INNER JOIN letra.quadra as quadra"
                + " LEFT JOIN chapa.venda as venda"
                + " INNER JOIN venda.cliente as cliente "
                + "WHERE quadra.quadra = '" + quadra + "' AND "
                + "letra.letra = '" + letra + "'"
                + " ORDER BY quadra.quadra,letra.letra,chapa.chapa";
    }

    private void populateLetras() {
        jCBLetra.removeAllItems();
        quadraAux = (String) jCBQuadra.getSelectedItem();

        List<Object[]> list = new DAO<>(Quadra.class).buscaAvançada(queryLetra(quadraAux));
        
        Object resultado[];
        for (int i = 0; i < list.size(); i++) {
            resultado = list.get(i);
            Letra letra = (Letra) resultado[1];
            hashLetra.add(letra.getLetra());
        }
        Iterator i = hashLetra.iterator();
        while (i.hasNext()) {
            jCBLetra.addItem(i.next());
        }
        hashLetra.clear();
    }

    private void populateQuadras() {
        jCBQuadra.removeAllItems();
        List<Quadra> list = new DAO<>(Quadra.class).listaTodos();
        
        for (int i = 0; i < list.size(); i++) {
            Quadra quadra = list.get(i);
            jCBQuadra.addItem(quadra.getQuadra());
        }

    }

    private void populateChapas() {
        jCBChapa.removeAllItems();
        quadraAux = (String) jCBQuadra.getSelectedItem();
        letraAux = (String) jCBLetra.getSelectedItem();
        
        List<Object[]> list = new DAO<>(Quadra.class).
                buscaAvançada(queryChapa(quadraAux, letraAux));

        Object resultado[];

        for (int i = 0; i < list.size(); i++) {
            resultado = list.get(i);
            Chapa chapa = (Chapa) resultado[0];
            chapas.add(chapa);
            jCBChapa.addItem(chapa.getChapa());
        }
    }

    private void limpar() throws ParseException {
        CadastrarObito co = new CadastrarObito(painel);
        painel.add(co);
        this.dispose();
        co.show();
    }
}
