package br.com.sigen.Interfaces;

import br.com.sigen.Editor.Editor;
import br.com.sigen.Modelo.Cliente;
import br.com.sigen.dao.DAO;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author user
 */
public class ListarCliente extends javax.swing.JInternalFrame {

    JDesktopPane painel;
    DAO<Cliente> clientedao;
    Cliente cliente;
    String endereco;
    List<Cliente> clientes;
    MaskFormatter maskCPF = new MaskFormatter("###.###.###-##");
    DefaultTableModel tmCliente = new DefaultTableModel(null, new String[]{
        "Nome", "CPF", "RG", "Telefone", "Celular", "Email", "Endereço"}) {
        boolean[] canEdit = new boolean[]{
            false, false, false, false, false, false, false
        };

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
        }
    };

    public ListarCliente(JDesktopPane painel) throws ParseException {
        super("SIGEN - Listagem de Proprietários");
        initComponents();
        this.painel = painel;
        tabela.setRowHeight(23);
        tabela.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseHeader(evt);
            }
        });
        jFTPesquisa.setSize(new Dimension(364, javax.swing.GroupLayout.DEFAULT_SIZE));
    }

    public ListarCliente(CadastrarVenda venda, JDesktopPane painel) throws ParseException {
        super("SIGEN - Listagem de Proprietários");
        initComponents();
        this.painel = painel;
        tabela.setRowHeight(23);
        this.venda = venda;
        tabela.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseHeader(evt);
            }
        });
        jFTPesquisa.setSize(new Dimension(364, javax.swing.GroupLayout.DEFAULT_SIZE));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLCabecalho = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jFTPesquisa = new javax.swing.JFormattedTextField();
        jLEmpresa = new javax.swing.JLabel();
        jLVersao = new javax.swing.JLabel();
        jLPesquisa = new javax.swing.JLabel();

        setClosable(true);

        jLCabecalho.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLCabecalho.setText("Listagem de Proprietários");

        tabela.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tabela.setModel(tmCliente);
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);

        jFTPesquisa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jFTPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFTPesquisaActionPerformed(evt);
            }
        });
        jFTPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFTPesquisaKeyTyped(evt);
            }
        });

        jLEmpresa.setText("NBNG. Todos os direitos reservados.");

        jLVersao.setText("Versão: 1.4.6");

        jLPesquisa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLPesquisa.setText("Nome:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLEmpresa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLVersao))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLPesquisa)
                        .addGap(18, 18, 18)
                        .addComponent(jFTPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLCabecalho)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1007, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLCabecalho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFTPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLPesquisa))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLVersao)
                    .addComponent(jLEmpresa)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*Conforme é digitado o nome do cliente, é realizado uma busca no banco
     a procura dos nomes parecidos e então os dados são populados na tabela
     */
    /*Ao clicar na tabela é criado a janela para atualizar os clientes, sendo
     enviado como parametro para essa nova janela os dados do cliente selecionado
     */
    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        //selecionando a linhas com o botão direito do mouse
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //pegando a linha e a coluna clicada
            int col = tabela.columnAtPoint(evt.getPoint());
            int row = tabela.rowAtPoint(evt.getPoint());
            if (col != -1 && row != -1) {
                //selecionando a linha
                tabela.setColumnSelectionInterval(col, col);
                tabela.setRowSelectionInterval(row, row);
            }
        }

        //Verificando se o botão direito foi pressionado  
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //cria o menu
            JPopupMenu menu = new JPopupMenu();
            //itens do menu
            JMenuItem vender = new JMenuItem("Efetuar Venda");
            JMenuItem atualiza = new JMenuItem("Atualizar");
            //função no menu vender para abrir a janela de venda
            vender.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    cliente = clientes.get(tabela.getSelectedRow());
                    venda.setCliente(cliente);
                    ListarCliente.this.dispose();
                }
            });
            //função no menu atualizar para abrir a janela de atualização
            atualiza.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    try {
                        AtualizaCliente ac
                                = new AtualizaCliente(clientes
                                        .get(tabela.getSelectedRow()),
                                        ListarCliente.this, painel);
                        ac.setVisible(true);
                    } catch (ParseException ex) {
                        JOptionPane.showMessageDialog(ListarCliente.this,
                                "Causa: \b" + ex,
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
            //trava o menu vender caso a listagem tenha sido aberta da janela principals
            if (venda == null) {
                vender.setEnabled(false);
            }

            //adicionando menus a caixa
            menu.add(vender);
            menu.add(atualiza);
            //mostrando o menu
            menu.show(this, evt.getX(), evt.getY() + 191);
        }
    }//GEN-LAST:event_tabelaMouseClicked

    private void jFTPesquisaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTPesquisaKeyTyped
        if (jLPesquisa.getText().equals("CPF: ")) {
            System.out.println("1");
            if (Editor.validaCPF(jFTPesquisa.getText())) {
                System.out.println("2");
                if (!jFTPesquisa.getText().equals("   .   .   -  ")) {
                    System.out.println("3");
                    while (tmCliente.getRowCount() > 0) {
                        tmCliente.removeRow(0);
                    }

                    clientedao = new DAO<>(Cliente.class);
                    clientes = clientedao.buscaPorCPF(jFTPesquisa.getText());
                    System.out.println(clientes.size());
                    clientedao.close();

                    for (int i = 0; i < clientes.size(); i++) {
                        endereco = clientes.get(i).
                                getEndereco().getLogradouro() + " " + clientes.get(i).
                                getNumero() + ", " + clientes.get(i).
                                getEndereco().getBairro() + " - " + clientes.get(i).
                                getEndereco().getCidade() + "/" + clientes.get(i).
                                getEndereco().getEstado() + " - CEP: " + clientes.get(i).
                                getEndereco().getCep() + "("
                                + clientes.get(i).getComplemento() + ")";
                        tmCliente.addRow(new String[]{null, null, null, null});
                        tmCliente.setValueAt(clientes.get(i).getNome(), i, 0);
                        tmCliente.setValueAt(clientes.get(i).getCpf(), i, 1);
                        tmCliente.setValueAt(clientes.get(i).getRg(), i, 2);
                        tmCliente.setValueAt(clientes.get(i).getTelefone(), i, 3);
                        tmCliente.setValueAt(clientes.get(i).getCelular(), i, 4);
                        tmCliente.setValueAt(clientes.get(i).getEmail(), i, 5);
                        tmCliente.setValueAt(endereco, i, 6);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Favor preencher um CPF!", "ERROR 404 - Content not found!", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            while (tmCliente.getRowCount() > 0) {
                tmCliente.removeRow(0);
            }
            clientedao = new DAO<>(Cliente.class);
            clientes = clientedao.buscaPorNome(jFTPesquisa.getText());
            clientedao.close();

            for (int i = 0; i < clientes.size(); i++) {
                endereco = clientes.get(i).
                        getEndereco().getLogradouro() + " " + clientes.get(i).
                        getNumero() + ", " + clientes.get(i).
                        getEndereco().getBairro() + " - " + clientes.get(i).
                        getEndereco().getCidade() + "/" + clientes.get(i).
                        getEndereco().getEstado() + " - CEP: " + clientes.get(i).
                        getEndereco().getCep() + "("
                        + clientes.get(i).getComplemento() + ")";
                tmCliente.addRow(new String[]{null, null, null, null});
                tmCliente.setValueAt(clientes.get(i).getNome(), i, 0);
                tmCliente.setValueAt(clientes.get(i).getCpf(), i, 1);
                tmCliente.setValueAt(clientes.get(i).getRg(), i, 2);
                tmCliente.setValueAt(clientes.get(i).getTelefone(), i, 3);
                tmCliente.setValueAt(clientes.get(i).getCelular(), i, 4);
                tmCliente.setValueAt(clientes.get(i).getEmail(), i, 5);
                tmCliente.setValueAt(endereco, i, 6);
            }
        }
    }//GEN-LAST:event_jFTPesquisaKeyTyped

    private void jFTPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFTPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFTPesquisaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField jFTPesquisa;
    private javax.swing.JLabel jLCabecalho;
    private javax.swing.JLabel jLEmpresa;
    private javax.swing.JLabel jLPesquisa;
    private javax.swing.JLabel jLVersao;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
    private CadastrarVenda venda;

    private void tabelaMouseHeader(MouseEvent evt) {
        int col = tabela.columnAtPoint(evt.getPoint());
        if (col == 0) {
            //hei 22 wid 52
            jLPesquisa.setText("Nome: ");

            jFTPesquisa.setValue("");
            jFTPesquisa.setSize(new Dimension(364, javax.swing.GroupLayout.DEFAULT_SIZE));

        } else if (col == 1) {
            jLPesquisa.setText("CPF: ");
            maskCPF.install(jFTPesquisa);
            jFTPesquisa.setSize(new Dimension(130, javax.swing.GroupLayout.DEFAULT_SIZE));
        }
    }
}
