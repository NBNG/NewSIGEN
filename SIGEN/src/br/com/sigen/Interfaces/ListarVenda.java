/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.sigen.Interfaces;

import br.com.sigen.Editor.Editor;
import br.com.sigen.Modelo.Chapa;
import br.com.sigen.Modelo.Letra;
import br.com.sigen.Modelo.Quadra;
import br.com.sigen.Modelo.Venda;
import br.com.sigen.dao.DAO;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class ListarVenda extends javax.swing.JInternalFrame {

    /**
     * Creates new form Listar_Vendas
     */
    ListSelectionModel lsmVenda;
    DefaultTableModel tmVenda = new DefaultTableModel(null, new String[]{"Nome", "CPF", "RG", "Tumulo", "Data"});
    DAO<Quadra> qdao = new DAO<>(Quadra.class);
    DAO<Venda> vdao = new DAO<>(Venda.class);
    List<Quadra> quadras = new ArrayList<>();
    List<Chapa> chapas = new ArrayList<>();
    List<Object[]> list;
    HashSet hashQuadra = new HashSet();
    HashSet hashLetra = new HashSet();
    String quadraAux, letraAux, chapaAux;
    Date dataInicial, dataFinal;
    JDesktopPane painel;

    public ListarVenda(JDesktopPane painel) {
        super("SIGEN - Listagem das Vendas");
        initComponents();
        populateQuadras();
        tabela.setRowHeight(23);
        this.painel = painel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRBCliente = new javax.swing.JRadioButton();
        jRBTumulo = new javax.swing.JRadioButton();
        jRBData = new javax.swing.JRadioButton();
        jTCliente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDCInicio = new com.toedter.calendar.JDateChooser();
        jDCFim = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLCabecalho = new javax.swing.JLabel();
        jLQuadra = new javax.swing.JLabel();
        jLChapa = new javax.swing.JLabel();
        jLLetra = new javax.swing.JLabel();
        jCBQuadra = new javax.swing.JComboBox();
        jCBChapa = new javax.swing.JComboBox();
        jCBLetra = new javax.swing.JComboBox();
        jLEmpresa = new javax.swing.JLabel();
        jLVersao = new javax.swing.JLabel();
        jBAvancado = new javax.swing.JButton();
        jTBSeleciona = new javax.swing.JToggleButton();

        setClosable(true);

        jRBCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBCliente.setText("Cliente - ");

        jRBTumulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBTumulo.setText("Túmulo - ");

        jRBData.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBData.setText("Data -");

        jTCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTClienteKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Início");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Fim");

        jDCInicio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jDCFim.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        tabela.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tabela.setModel(tmVenda);
        jScrollPane1.setViewportView(tabela);

        jLCabecalho.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLCabecalho.setText("Listagem de Vendas - Túmulos");

        jLQuadra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLQuadra.setText("Quadra:");

        jLChapa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLChapa.setText("Letra: ");

        jLLetra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLLetra.setText("Chapa:");

        jCBQuadra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBQuadra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBQuadraActionPerformed(evt);
            }
        });

        jCBChapa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCBLetra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBLetra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBLetraActionPerformed(evt);
            }
        });

        jLEmpresa.setText("NBNG. Todos os direitos reservados.");

        jLVersao.setText("Versão: 1.4.6");

        jBAvancado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBAvancado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sigen/Imagens/pesquisar.png"))); // NOI18N
        jBAvancado.setText("Pesquisar");
        jBAvancado.setToolTipText("Pesquisa exclusiva para nome do proprietário do túmulo, nome do falecido ou data.");
        jBAvancado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAvancadoActionPerformed(evt);
            }
        });

        jTBSeleciona.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTBSeleciona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sigen/Imagens/editar.png"))); // NOI18N
        jTBSeleciona.setText("Selecionar Tudo");
        jTBSeleciona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBSelecionaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRBTumulo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLQuadra, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCBQuadra, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(44, 44, 44)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jCBLetra, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(44, 44, 44))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLChapa)
                                                .addGap(68, 68, 68)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCBChapa, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLLetra)))
                                    .addComponent(jLCabecalho))
                                .addGap(92, 92, 92)
                                .addComponent(jBAvancado)
                                .addGap(18, 18, 18)
                                .addComponent(jTBSeleciona)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRBCliente)
                        .addGap(12, 12, 12)
                        .addComponent(jTCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jRBData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDCInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jDCFim, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLEmpresa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLVersao))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLCabecalho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRBCliente)
                        .addComponent(jTCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jDCFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jDCInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)))
                        .addComponent(jRBData)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRBTumulo)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLQuadra)
                            .addComponent(jLChapa)
                            .addComponent(jLLetra))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCBQuadra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCBLetra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCBChapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBAvancado)
                            .addComponent(jTBSeleciona))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLEmpresa)
                    .addComponent(jLVersao)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTClienteKeyTyped
        if (jRBCliente.isSelected()) {
            while (tmVenda.getRowCount() > 0) {
                tmVenda.removeRow(0);
            }
            list = vdao.buscaAvançada(montaQuery());
            for (int i = 0; i < list.size(); i++) {
                Object[] resultado = list.get(i);
                String tumulo = "Quadra: " + resultado[3] + " "
                        + "Letra: " + resultado[4] + " Chapa: " + resultado[5];
                tmVenda.addRow(new String[]{null, null, null, null});
                //Posições abaixo relativos as ordem das colunas do JTABLE
                tmVenda.setValueAt(resultado[0], i, 0);
                tmVenda.setValueAt(resultado[1], i, 1);
                tmVenda.setValueAt(resultado[2], i, 2);
                tmVenda.setValueAt(tumulo, i, 3);
                tmVenda.setValueAt(Editor.formatData((Date) resultado[6]), i, 4);

            }
        }
    }//GEN-LAST:event_jTClienteKeyTyped

    private void jCBQuadraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBQuadraActionPerformed
        populateLetras();
    }//GEN-LAST:event_jCBQuadraActionPerformed

    private void jCBLetraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBLetraActionPerformed
        populateChapas();
    }//GEN-LAST:event_jCBLetraActionPerformed

    private void jBAvancadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAvancadoActionPerformed
        while (tmVenda.getRowCount() > 0) {
            tmVenda.removeRow(0);
        }
        list = vdao.buscaAvançada(montaQuery());
        for (int i = 0; i < list.size(); i++) {
            Object[] resultado = list.get(i);
            String tumulo = "Quadra: " + resultado[3] + " "
                    + "Letra: " + resultado[4] + " Chapa: " + resultado[5];
            tmVenda.addRow(new String[]{null, null, null, null});
            //Posições abaixo relativos as ordem das colunas do JTABLE
            tmVenda.setValueAt(resultado[0], i, 0);
            tmVenda.setValueAt(resultado[1], i, 1);
            tmVenda.setValueAt(resultado[2], i, 2);
            tmVenda.setValueAt(tumulo, i, 3);
            tmVenda.setValueAt(Editor.formatData((Date) resultado[6]), i, 4);

        }
    }//GEN-LAST:event_jBAvancadoActionPerformed

    private void jTBSelecionaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBSelecionaActionPerformed
        if (jTBSeleciona.isSelected()) {
            jRBCliente.setSelected(true);
            jRBData.setSelected(true);
            jRBTumulo.setSelected(true);
        } else {
            jRBCliente.setSelected(false);
            jRBData.setSelected(false);
            jRBTumulo.setSelected(false);
        }
    }//GEN-LAST:event_jTBSelecionaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAvancado;
    private javax.swing.JComboBox jCBChapa;
    private javax.swing.JComboBox jCBLetra;
    private javax.swing.JComboBox jCBQuadra;
    private com.toedter.calendar.JDateChooser jDCFim;
    private com.toedter.calendar.JDateChooser jDCInicio;
    private javax.swing.JLabel jLCabecalho;
    private javax.swing.JLabel jLChapa;
    private javax.swing.JLabel jLEmpresa;
    private javax.swing.JLabel jLLetra;
    private javax.swing.JLabel jLQuadra;
    private javax.swing.JLabel jLVersao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRBCliente;
    private javax.swing.JRadioButton jRBData;
    private javax.swing.JRadioButton jRBTumulo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jTBSeleciona;
    private javax.swing.JTextField jTCliente;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
    private String queryLetra(String quadra) {
        return "FROM Chapa chapa "
                + "INNER JOIN chapa.letra as letra"
                + " INNER JOIN letra.quadra as quadra"
                + " LEFT JOIN chapa.venda as venda"
                + " INNER JOIN venda.cliente as cliente "
                + "where quadra.quadra = '" + quadra + "'"
                + " ORDER BY quadra.quadra,letra.letra,chapa.chapa";
    }

    private String queryChapa(String quadra, String letra) {
        return "FROM Chapa chapa "
                + "INNER JOIN chapa.letra as letra"
                + " INNER JOIN letra.quadra as quadra"
                + " LEFT JOIN chapa.venda as venda"
                + " INNER JOIN venda.cliente as cliente "
                + "WHERE quadra.quadra = '" + quadra + "' AND "
                + "letra.letra = '" + letra + "'"
                + " ORDER BY quadra.quadra,letra.letra,chapa.chapa";
    }

    private void populateLetras() {
        jCBLetra.removeAllItems();
        quadraAux = (String) jCBQuadra.getSelectedItem();

        List<Object[]> list = qdao.buscaAvançada(queryLetra(quadraAux));
        Object resultado[];
        for (int i = 0; i < list.size(); i++) {
            resultado = list.get(i);
            Letra letra = (Letra) resultado[1];
            hashLetra.add(letra.getLetra());
        }
        Iterator i = hashLetra.iterator();
        while (i.hasNext()) {
            jCBLetra.addItem(i.next());
        }
        hashLetra.clear();
    }

    private void populateQuadras() {
        jCBQuadra.removeAllItems();
        List<Quadra> list = qdao.listaTodos();
        for (int i = 0; i < list.size(); i++) {
            Quadra quadra = list.get(i);
            jCBQuadra.addItem(quadra.getQuadra());
        }

    }

    private void populateChapas() {
        jCBChapa.removeAllItems();
        quadraAux = (String) jCBQuadra.getSelectedItem();
        letraAux = (String) jCBLetra.getSelectedItem();
        List<Object[]> list = qdao.
                buscaAvançada(queryChapa(quadraAux, letraAux));
        Object resultado[];

        for (int i = 0; i < list.size(); i++) {
            resultado = list.get(i);
            Chapa chapa = (Chapa) resultado[0];
            chapas.add(chapa);
            jCBChapa.addItem(chapa.getChapa());
        }
    }

    private void limpar() throws ParseException {
        ListarVenda lv = new ListarVenda(painel);
        painel.add(lv);
        this.dispose();
        lv.show();
    }

    private String montaQuery() {
        String query = "SELECT cliente.nome, cliente.cpf, cliente.rg,"
                + " quadra.quadra,chapa.chapa, letra.letra, venda.data "
                + "FROM Venda venda "
                + "INNER JOIN venda.cliente cliente "
                + "INNER JOIN venda.chapa chapa "
                + "INNER JOIN chapa.letra letra "
                + "INNER JOIN letra.quadra quadra "
                + "Where 1=1 ";
        if (jRBCliente.isSelected()) {
            query += "AND lower(cliente.nome) "
                    + "like lower('%" + jTCliente.getText() + "%') ";
        }
        if (jRBData.isSelected()) {
            dataInicial = jDCInicio.getDate();
            dataFinal = jDCFim.getDate();
            if (dataInicial == null || dataFinal == null) {
                JOptionPane.showMessageDialog(this, "Pesquisa efetuada sem datas"
                        + ". \n Ambas as datas devem ser escolhidas!");
            } else {
                query += "AND obito.data BETWEEN '" + dataInicial + ""
                        + "' AND '" + dataFinal + "' ";
            }
        }
        if (jRBTumulo.isSelected()) {
            quadraAux = (String) jCBQuadra.getSelectedItem();
            letraAux = (String) jCBLetra.getSelectedItem();
            chapaAux = (String) jCBChapa.getSelectedItem();
            query += "AND quadra.quadra='" + quadraAux + "' "
                    + "AND letra.letra ='" + letraAux + "' "
                    + "AND chapa.chapa='" + chapaAux + "'";
        }
        query += " order by cliente.nome";
        return query;
    }
}
